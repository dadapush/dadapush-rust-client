/*
 * DaDaPush Public API
 *
 * DaDaPush: Real-time Notifications App Send real-time notifications through our API without coding and maintaining your own app for iOS or Android devices.
 *
 * The version of the OpenAPI document: v1
 * Contact: contacts@dadapush.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct DaDaPushMessageApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> DaDaPushMessageApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> DaDaPushMessageApiClient<C> {
        DaDaPushMessageApiClient {
            configuration: configuration,
        }
    }
}

pub trait DaDaPushMessageApi {
    fn create_message(&self, body: ::models::MessagePushRequest, x_channel_token: &str) -> Box<Future<Item = ::models::ResultOfMessagePushResponse, Error = Error<serde_json::Value>>>;
    fn delete_message(&self, message_id: i64, x_channel_token: &str) -> Box<Future<Item = ::models::Result, Error = Error<serde_json::Value>>>;
    fn get_message(&self, message_id: i64, x_channel_token: &str) -> Box<Future<Item = ::models::ResultOfMessageObject, Error = Error<serde_json::Value>>>;
    fn get_messages(&self, page: i32, page_size: i32, x_channel_token: &str) -> Box<Future<Item = ::models::ResultOfPageResponseOfMessageObject, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>DaDaPushMessageApi for DaDaPushMessageApiClient<C> {
    fn create_message(&self, body: ::models::MessagePushRequest, x_channel_token: &str) -> Box<Future<Item = ::models::ResultOfMessagePushResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/message".to_string())
            .with_header_param("x-channel-token".to_string(), x_channel_token.to_string())
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn delete_message(&self, message_id: i64, x_channel_token: &str) -> Box<Future<Item = ::models::Result, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/message/{messageId}".to_string())
            .with_path_param("messageId".to_string(), message_id.to_string())
            .with_header_param("x-channel-token".to_string(), x_channel_token.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_message(&self, message_id: i64, x_channel_token: &str) -> Box<Future<Item = ::models::ResultOfMessageObject, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/message/{messageId}".to_string())
            .with_path_param("messageId".to_string(), message_id.to_string())
            .with_header_param("x-channel-token".to_string(), x_channel_token.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_messages(&self, page: i32, page_size: i32, x_channel_token: &str) -> Box<Future<Item = ::models::ResultOfPageResponseOfMessageObject, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/messages".to_string())
            .with_query_param("page".to_string(), page.to_string())
            .with_query_param("pageSize".to_string(), page_size.to_string())
            .with_header_param("x-channel-token".to_string(), x_channel_token.to_string())
            .execute(self.configuration.borrow())
    }

}
